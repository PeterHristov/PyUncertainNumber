PyUncertainNumber.UP.utils
==========================

.. py:module:: PyUncertainNumber.UP.utils


Functions
---------

.. autoapisummary::

   PyUncertainNumber.UP.utils.header_results
   PyUncertainNumber.UP.utils.create_folder
   PyUncertainNumber.UP.utils.create_csv
   PyUncertainNumber.UP.utils.Upper_lower_values_with_input
   PyUncertainNumber.UP.utils.post_processing
   PyUncertainNumber.UP.utils.NA_values_with_input
   PyUncertainNumber.UP.utils.post_processing_old
   PyUncertainNumber.UP.utils.post_process


Module Contents
---------------

.. py:function:: header_results(all_output: numpy.ndarray, all_input: numpy.ndarray)

   Generates generic header names for output and input dataframes.

   This function creates a list of column names suitable for a combined DataFrame
   containing both output and input data. It dynamically generates header names based on
   the shapes of the `all_output` and `all_input` NumPy arrays.

   :param all_output: A NumPy array representing the output data. It can be 1-dimensional or
                      2-dimensional. If 1D, it's assumed to represent a single output variable.
   :param all_input: A NumPy array representing the input data. It's assumed to be 2-dimensional,
                     where each row corresponds to a sample and each column represents an input variable.

   :returns:

             - A list of strings representing the header names. The first part of the list
             contains headers for the output variables (e.g., 'y0', 'y1', ...), and the second
             part contains headers for the input variables (e.g., 'x0', 'x1', ...).


.. py:function:: create_folder(base_path, method)

   Creates a folder named after the called UP method where the results files are stored

   :param - base_path: The base path
   :param - method: the name of the called method

   signature:
       create_folder(base_path: string, method: string ) -> path.folder

   .. note::

      - the augument `base_path` will specify the location of the created results folder.
      - the argument `method` will provide the name for the results folder.

   :returns:

             -  A folder in a prespecified path

   .. rubric:: Example

   base_path = "C:/Users/DAWS2_code/UP"
   method = "vertex"
   y = create_folder(base_path, method)


.. py:function:: create_csv(res_path, filename, data)

   Creates a .csv file and sotres it in a pre-specified folder with results generated by a UP method

   :param - res_path: A folder in a prespecified path named after the called UP method
   :param - filename: the name of the file
   :param - data: a pandas.dataframe with results from UP method

   signature:
       create_csv(res_path = path, filename = filename, data = pandas.dataframe) -> path.filename

   .. note::

      - the augument `res_path` will specify the folder where the .csv file will be created.
      - argument `file` will provide the name of hte .csv file.
      - argument `data` will provide data in terms of pandas.dataframe.

   :returns:

             -  A .csv file in a prespecified folder

   .. rubric:: Example

   base_path = "C:/Users/DAWS2_code/UP/vertex"
   filename = 'min_max_values'

      df = pd.DataFrame(
        {"Name" : ["y0", "y0"],
         "fun"  : ["min","max"]
         "y0" : [4, 6]}, index = [1, 2, 3])
       header = ['Name', 'fun', 'values']
       y = create_csv(res_path, filename, df)


.. py:function:: Upper_lower_values_with_input(df_OUTPUT_INPUT, i)

.. py:function:: post_processing(all_input: numpy.ndarray, all_output: numpy.ndarray, res_path)

   Post processing the results of a UP method

   :param - all_input: A NumPy array containing the input values used in the UP method.
   :param - all_output: A NumPy array containing the corresponding output values from the UP method.
   :param - res_path: The path to the directory where the results will be saved.

   signature:
       post_processing(all_input:np.ndarray, all_output:np.ndarray, res_path: path ) -> pandas.DataFrame

   .. note::

      - the augument `df_OUTPUT_INPUT` will specify pandas.dataframe of the min-max values for each output
      - arguement `res_path` will provide the location of the directory of the results.

   :returns: A pandas DataFrame containing the combined output and input data.
             - Creates "Raw_data.csv" in `res_path` containing the raw output and input data.
             - Creates "NAlog.csv" in `res_path` if any NaN values are present in the output,
               logging the corresponding input values.
             - Prints a message if no NaN values are found.
   :rtype: - df_output_input

   .. rubric:: Example

   df = pd.DataFrame(
    {"y0" : [4, 5, 5, 6],
     "x0" : [1, 2, 1, 2],
     "x1" : [3, 3, 4, 4]}, index = [1, 2, 3])
   res_path = "C:/Users/DAWS2_code/UP/vertex"
   y = post_processing(df, res_path)

   # TODO create a .csv with all min,max and associated x values ...
   # units ...
   # fields: None...


.. py:function:: NA_values_with_input(df_OUTPUT_INPUT, res_path)

   Searching for NAN values in the output of a called UP method and create .csv file to store them.

   :param - df_OUTPUT_INPUT: a pandas.DataFrame containing output and associated input produced by UP method
   :param - res_path: The path, named after the UP method, where the results will be saved

   signature:
       post_processing(df_OUTPUT_INPUT: pandas.dataframe, res_path: path ) -> pandas.DataFrame

   .. note::

      - the augument `df_OUTPUT_INPUT` will specify pandas.dataframe of the min-max values for each output
      - arguement `res_path` will provide the location of the directory of the results.

   :returns:

             -  A .csv file to store possible NAN output values and their associated input values.

   .. rubric:: Example

   df = pd.DataFrame(
    {"y0" : [4, 5, 5, 6],
     "x0" : [1, 2, 1, 2],
     "x1" : [3, 3, 4, 4]}, index = [1, 2, 3])
   res_path = "C:/Users/DAWS2_code/UP/vertex"
   y = post_processing(df, res_path)


.. py:function:: post_processing_old(df_OUTPUT_INPUT, res_path)

   Post processing the results of a UP method

   :param - df_OUTPUT_INPUT: a pandas.DataFrame containing output and associated input produced by UP method
   :param - res_path: The path, named after the UP method, where the results will be saved

   signature:
       post_processing(df_OUTPUT_INPUT: pandas.dataframe, res_path: path ) -> pandas.DataFrame

   .. note::

      - the augument `df_OUTPUT_INPUT` will specify pandas.dataframe of the min-max values for each output
      - arguement `res_path` will provide the location of the directory of the results.

   :returns:

             -  A pandas.Dataframe with the min-max for each output QoI
             -  A path, named after the called UP method
             -  A warning if input values produce NAN output.
             -  A .csv file to store a pandas dataframe of the raw results saved in the specified folder.
             -  A .csv file  to store the min/max output values and their associated input values.

   .. rubric:: Example

   df = pd.DataFrame(
    {"y0" : [4, 5, 5, 6],
     "x0" : [1, 2, 1, 2],
     "x1" : [3, 3, 4, 4]}, index = [1, 2, 3])
   res_path = "C:/Users/DAWS2_code/UP/vertex"
   y = post_processing(df, res_path)

   # TODO post-process the df into UN objects ...
   # units ...
   # fields: None...


.. py:function:: post_process()

