PyUncertainNumber.pba.pbox_base
===============================

.. py:module:: PyUncertainNumber.pba.pbox_base


Exceptions
----------

.. autoapisummary::

   PyUncertainNumber.pba.pbox_base.NotIncreasingError


Classes
-------

.. autoapisummary::

   PyUncertainNumber.pba.pbox_base.Pbox


Functions
---------

.. autoapisummary::

   PyUncertainNumber.pba.pbox_base.truncate
   PyUncertainNumber.pba.pbox_base.imposition
   PyUncertainNumber.pba.pbox_base.mixture


Module Contents
---------------

.. py:exception:: NotIncreasingError

   Bases: :py:obj:`Exception`


   Common base class for all non-exit exceptions.


.. py:class:: Pbox(left=None, right=None, steps=None, shape=None, mean_left=None, mean_right=None, var_left=None, var_right=None, interpolation='linear')

   not the main constructor BUT the base constructor


   .. py:attribute:: STEPS

      Leslie:
      - Essentially, from the code implementation, a Pbox object is defined by the left and right bounds (i.e. nd.arrays).
      - Advantage is that this unifies both parametric and non-parametric pboxes but disadvantage is it discards the parameter
      information of the bounds which we may desire in the case of Cbox.


   .. py:attribute:: left


   .. py:attribute:: right


   .. py:attribute:: steps


   .. py:attribute:: shape


   .. py:attribute:: mean_left


   .. py:attribute:: mean_right


   .. py:attribute:: var_left
      :value: 0



   .. py:attribute:: var_right


   .. py:method:: get_range()

      get the range for either a pbox or a distribution

      .. note:: - #! added by Leslie



   .. py:property:: rangel

      leslie defined range property


   .. py:method:: __repr__()


   .. py:attribute:: __str__


   .. py:method:: __iter__()


   .. py:method:: __neg__()


   .. py:method:: __lt__(other)


   .. py:method:: __rlt__(other)


   .. py:method:: __le__(other)


   .. py:method:: __rle__(other)


   .. py:method:: __gt__(other)


   .. py:method:: __rgt__(other)


   .. py:method:: __ge__(other)


   .. py:method:: __rge__(other)


   .. py:method:: __and__(other)


   .. py:method:: __rand__(other)


   .. py:method:: __or__(other)


   .. py:method:: __ror__(other)


   .. py:method:: __add__(other)


   .. py:method:: __radd__(other)


   .. py:method:: __sub__(other)


   .. py:method:: __rsub__(other)


   .. py:method:: __mul__(other)


   .. py:method:: __rmul__(other)


   .. py:method:: __pow__(other)


   .. py:method:: __rpow__(other)


   .. py:method:: __truediv__(other)


   .. py:method:: __rtruediv__(other)


   .. py:method:: lo()

      Returns the left-most value in the interval



   .. py:method:: hi()

      Returns the right-most value in the interval



   .. py:method:: _computemoments()


   .. py:method:: _checkmoments()


   .. py:method:: cut()


   .. py:method:: cuth(x)

      get the bounds on the cumulative probability associated with any x-value



   .. py:method:: cutv(p=0.5)

      get the bounds on the x-value at any particular probability level



   .. py:method:: _unary(*args, function=lambda x: x)


   .. py:method:: add(other: Union[Pbox, PyUncertainNumber.pba.interval.Interval, float, int], method='f') -> Pbox

      Adds to Pbox to other using the defined dependency method





   .. py:method:: pow(other: Union[Pbox, PyUncertainNumber.pba.interval.Interval, float, int], method='f') -> Pbox

      Raises a p-box to the power of other using the defined dependency method

      :param other: Pbox, Interval or numeric type
      :param method:

      :return: Pbox
      :rtype: Pbox




   .. py:method:: sub(other, method='f')


   .. py:method:: mul(other, method='f')


   .. py:method:: div(other, method='f')


   .. py:method:: exp()


   .. py:method:: sqrt()


   .. py:method:: recip()


   .. py:method:: lt(other, method='f')


   .. py:method:: le(other, method='f')


   .. py:method:: gt(other, method='f')


   .. py:method:: ge(other, method='f')


   .. py:method:: min(other, method='f')

      Returns a new Pbox object that represents the element-wise minimum of two Pboxes.

      :param - other: Another Pbox object or a numeric value.
      :param - method: Calculation method to determine the minimum. Can be one of 'f', 'p', 'o', 'i'.

      :returns: Pbox



   .. py:method:: max(other, method='f')


   .. py:method:: truncate(a, b, method='f')

      Equivalent to self.min(a,method).max(b,method)



   .. py:method:: env(other)

      .. _interval.env:

      Computes the envelope of two Pboxes.

      Parameters:
      - other: Pbox or numeric value
          The other Pbox or numeric value to compute the envelope with.

      Returns:
      - Pbox
          The envelope Pbox.

      Raises:
      - ArithmeticError: If both Pboxes have different number of steps.



   .. py:method:: logicaland(other, method='f')


   .. py:method:: logicalor(other, method='f')


   .. py:method:: get_interval(*args) -> PyUncertainNumber.pba.interval.Interval


   .. py:method:: get_probability(val) -> PyUncertainNumber.pba.interval.Interval


   .. py:method:: summary() -> str


   .. py:method:: mean() -> PyUncertainNumber.pba.interval.Interval

      Returns the mean of the pbox



   .. py:method:: median() -> PyUncertainNumber.pba.interval.Interval

      Returns the median of the distribution



   .. py:method:: support() -> PyUncertainNumber.pba.interval.Interval


   .. py:method:: get_x()

      returns the x values for plotting



   .. py:method:: get_y()

      returns the y values for plotting



   .. py:method:: straddles(N, endpoints=True) -> bool

      :param N: Number to check
      :type N: numeric
      :param endpoints: Whether to include the endpoints within the check
      :type endpoints: bool

      :returns: * *True* -- If :math:`\mathrm{left} \leq N \leq \mathrm{right}` (Assuming `endpoints=True`)
                * *False* -- Otherwise



   .. py:method:: straddles_zero(endpoints=True) -> bool

      Checks whether :math:`0` is within the p-box



   .. py:method:: imp(other)

      Returns the imposition of self with other



   .. py:method:: show(figax=None, now=True, title='', x_axis_label='x', **kwargs)


   .. py:attribute:: plot


   .. py:method:: display(title='', ax=None, style='simple', fill_color='lightgray', **kwargs)

      quickly plot the pba object

      # !Leslie defined plotting function



.. py:function:: truncate(pbox, min, max)

.. py:function:: imposition(*args: Union[Pbox, PyUncertainNumber.pba.interval.Interval, float, int])

   Returns the imposition of the p-boxes in *args

   :param \*args: Number of p-boxes or objects to be mixed

   :rtype: Pbox


.. py:function:: mixture(*args: Union[Pbox, PyUncertainNumber.pba.interval.Interval, float, int], weights: List[Union[float, int]] = [], steps: int = Pbox.STEPS) -> Pbox

   Mixes the pboxes in *args
   :param \*args: Number of p-boxes or objects to be mixed
   :param weights: Right side of box

   :rtype: Pbox


